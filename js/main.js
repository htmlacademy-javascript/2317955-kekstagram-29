// 4.16. Больше деталей
// функции для создания массива из 25  случайно сгенерированных объектов (фотографий)

const FOTOS_AMOUNT = 25;

const MESSAGES_SET = [
  'Всё отлично!',
  'В целом всё неплохо. Но не всё.',
  'Когда вы делаете фотографию, хорошо бы убирать палец из кадра. В конце концов это просто непрофессионально.',
  'Моя бабушка случайно чихнула с фотоаппаратом в руках и у неё получилась фотография лучше.',
  'Я поскользнулся на банановой кожуре и уронил фотоаппарат на кота и у меня получилась фотография лучше.',
  'Лица у людей на фотке перекошены, как будто их избивают. Как можно было поймать такой неудачный момент?!'
];
const DESCRIPTIONS_SET = [
  'Когда режу лук, плачет он.',
  'Мёртвое море знаешь? я убил.',
  'Аскорбинку знаешь? Я оскорбил.',
  'Знаешь Соединённые Штаты Америки? Я соединил.',
  'Запомни: Одна ошибка - и ты ошибся!',
  'Если закрыть глаза - станет темно.',
  'Чем выше горы, тем ниже Приоры.',
  'Шаг влево, шаг вправо - два шага.',
  'Если хочешь идти - иди. Если хочешь забыть - забудь.',
  'Клади густо - в амбаре будет не пусто.',
  'Приходи одни - мы тоже одни придём.',
  'Если будут обижать, не обижайся.',
  'Эта рука была оторвана нахрен и пришита другой рукой.',
  'Шаурма как объединяет, так и разлучает людей.',
  'Лучше говно в руке, чем рука в говне.',
  'Если ты один, то ты такой не один.',
  'Почему водка так быстро кончается? (c) Стетхем',
  'Живи. кайфуй, гуляй, играй, упал - вставай, наглей, ругай, чужих роняй, своих спасай, пельмени, суп, картошка, чай',
  `Don't worry
Be happy
Pey whisky
Love siski`
];
const NAMES_SET = [
  'Linus',
  'Enrickerri',
  'Rishanona',
  'Ienna',
  'Jaguerick',
  'Jenne',
  'Isha',
  'Ellerish',
  'Wentani',
  'Xinael'
];

// Каждый объект массива — описание фотографии, опубликованной пользователем.
// Структура каждого объекта должна быть следующей:
const objectFotoExample = {
  //  число — идентификатор опубликованной фотографии. Это число от 1 до 25. Идентификаторы не должны повторяться.
  // доп задание из кексобукинга: перед однозначными числами ставится 0, например 01, 02, 03 ... 10
  id: 0,

  // строка — адрес картинки вида photos/{{i}}.jpg, где {{i}} — это число от 1 до 25. Адреса картинок не должны повторяться.
  // доп задание из кексобукинга: перед однозначными числами ставится 0, например 01, 02, 03 ... 10
  url: '',

  // строка — описание фотографии из DESCRIPTIONS_SET
  description: '',

  // число — количество лайков, поставленных фотографии. Случайное число от 15 до 200.
  likes: 0,

  //  массив объектов — список комментариев, оставленных другими пользователями к этой фотографии. размер массива — случайное число от 0 до 30. Все комментарии генерируются случайным образом.
  comments: [ {id: 0, avatar: '', message: '', name: '', } ],
}

const objectCommentExample = {
  //  любое число. Идентификаторы не должны повторяться.
  id: 0,

  // формируется по правилу img/avatar-{{случайное число от 1 до 6}}.svg. Аватарки подготовлены в директории img.
  // доп задание из кексобукинга: перед однозначными числами ставится 0, например 01, 02, 03 ... 10
  avatar: '',

  // взять одно или два случайных предложения из представленных в MESSAGES_SET
  message: '',

  //Имена авторов также должны быть случайными из NAMES_SET
  name: '',
}


// написать вспомогательные функции:

// получает целое положительное число в указанном диапазоне (если не указан - возвращает 1)
const getRandomIntegerPositiveNumber = (from = 1, to = 1) => {
  if (from === to) {
    return from;
  }
  from = from > 0 ? Math.round(parseInt(from, 10)) : 1;
  to = to > 0 ? Math.round(parseInt(to, 10)) : 1;
  if (from > to) {
    const swap = to;
    to = from;
    from = swap;
  }
  const rangeSize = to - from;
  return Math.round(from + Math.random() * rangeSize);
};

// получает рандомный элемент из переданного массива по рандомному индексу
const getRandomElement = (array) => {
  const index = getRandomIntegerPositiveNumber(array.length - 1);
  return array[index];
};

// создать объект из элементов, полученных по рандомному индексу из массива
const getRandomComment = () => ({
  id: getRandomIntegerPositiveNumber(25),
  avatar: `img/avatar-${getRandomIntegerPositiveNumber(6)}.svg`,
  message: getRandomElement(MESSAGES_SET),
  name: getRandomElement(NAMES_SET),
});
// console.table(getRandomComment());

// создать массив из объектов рандомной длинны заданного диапазона
const getRandomArray = (maxLength, instructions) =>
  Array.from({length: getRandomIntegerPositiveNumber(0, maxLength)}, instructions);
// console.table(getRandomArray(30, getRandomComment))


const getRandomFoto = () => ({
  id: getRandomIntegerPositiveNumber(25),
  url: `photos/${getRandomIntegerPositiveNumber(25)}.jpg`,
  description: getRandomElement(DESCRIPTIONS_SET),
  likes: getRandomIntegerPositiveNumber(15, 200),
  comments: getRandomArray(30, getRandomComment),
})
// console.log(getRandomFoto());

//нужно проверить, что рандомные объекты в массиве не будут повторяться!

// когда получилось получить один правильно собранный из рандомных элементов объект - тогда начать делать массив из таких объектов

